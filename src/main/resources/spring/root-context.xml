<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="com.chinaopensource.soft.blogserver" />

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc-mysql.properties</value>
			</list>
		</property>
	</bean>

	<!-- 系统数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
	</bean>
	
	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/chinaopensource/soft/blogserver/**/dao/*Mapper.xml" />
		<property name="plugins">
			<array>
				<bean  class="com.github.pagehelper.PageInterceptor">
					<property name="properties">  
                        <value>  
                            helperDialect=mysql
                            offsetAsPageNum=true
	                        reasonable=true
	                        rowBoundsWithCount=true
	                        params=count=countSql
	                        params=pageNum=start
	                        params=pageSize=limit
	                        params=pageSizeZero=zero
	                        params=reasonable=heli
	                        pageSizeZero=true
                        </value>  
                    </property>
				</bean>
			</array>
		</property>
		
	</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
 		<property name="basePackage" value="com.chinaopensource.soft.blogserver.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
 
 
 
 	<!-- (事务管理)TransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 声明式容器事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" timeout="3600"/>
			<tx:method name="create*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" timeout="3600"/>
			<tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" timeout="3600"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" timeout="3600"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" timeout="3600"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 通过aop定义事务增强切面 -->
	<aop:config proxy-target-class="false">
		<aop:pointcut expression="execution(* com.chinaopensource.soft.blogserver..*.*ServiceImpl.*(..))" id="pointcut1"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
	</aop:config>
 
 
 
 
 	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	   <property name="patterns">
	       <list>
	           <value>com.chinaopensource.soft.blogserver.*</value>
	       </list>
	   </property>
	</bean>
	<aop:config proxy-target-class="true">
	   <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

	<!--公用 cache配置  用在spring和shiro-->
	<bean id = "ehCacheManager" class= "org.springframework.cache.ehcache.EhCacheManagerFactoryBean" >
		<property name = "configLocation" value= "classpath:spring/ehcache.xml" />
	</bean>
	<!-- 配置spring的配置 -->
	<bean id = "ehcacheCacheManager" class= "org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager"/>
	</bean>
	<!--开启注解-->
	<cache:annotation-driven cache-manager ="ehcacheCacheManager" />

	<!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager"/>
	</bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.chinaopensource.soft.blogserver.common.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.chinaopensource.soft.blogserver.common.shiro.realm.UserRealm" >
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
    	<property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
 
   <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/user/login" />
		<property name="successUrl" value="/user/"/>
		<property name="unauthorizedUrl" value="/user/unauth"/>
		<!-- 自定义filter-->
		<property name="filters">
			<map>
				<entry key="simpleShiroFilter" value-ref="simpleShiroFilter" />
			</map>
		</property>
        <property name="filterChainDefinitions">
            <value>
				/resources/** = anon
				/api/** = anon
				/page/** = anon

				/user/unauth = anon
				/user/login = anon
				/user/register = anon
				/user/addUser = anon
				/user/validateCode = anon

				/user/logout = logout

				/** = simpleShiroFilter,user
            </value>
        </property>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>
